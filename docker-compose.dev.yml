services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./frontend/package.json
    ports:
      - 4200:4200

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
    develop:
      watch:
        - action: sync
          path: ./backend/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./backend/package.json
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  queue-manager:
    build:
      context: ./services/manager
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
    develop:
      watch:
        - action: sync
          path: ./services/manager/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/manager/package.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    command: >
      sh -c "
        echo 'Waiting for services to start...' &&
        sleep 30 &&
        echo 'Starting queue-manager' &&
        tsx watch --unhandled-rejections=strict --env-file=.env src/index.ts
      "

  worker-bus-api:
    build:
      context: ./services/workers/worker-bus-api
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
    develop:
      watch:
        - action: sync
          path: ./services/workers/worker-bus-api/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/workers/worker-bus-api/package.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    deploy:
      replicas: 2

  worker-gtfs:
    build:
      context: ./services/workers/worker-gtfs
      dockerfile: Dockerfile.dev
    develop:
      watch:
        - action: sync
          path: ./services/workers/worker-gtfs/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/workers/worker-gtfs/package.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  worker-notification:
    build:
      context: ./services/workers/worker-notification
      dockerfile: Dockerfile.dev
    develop:
      watch:
        - action: sync
          path: ./services/workers/worker-notification/src
          target: /app/src
          ignore:
            - node_modules/
        - action: rebuild
          path: ./services/workers/worker-notification/package.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # Redis and Postgres remain unchanged since they're using images
  redis:
    image: 'redis:7.2.5'

  postgres:
    image: 'postgres:16.3'
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d thebus -h localhost']
      interval: 3s
      timeout: 1s
      retries: 10
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=thebus
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST_AUTH_METHOD=trust
