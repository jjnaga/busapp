services:
  frontend:
    build:
      context: ./frontend
    environment:
      - NODE_ENV=production
    ports:
      - 9080:9080
    depends_on:
      backend:
        condition: service_started
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
  queue-manager:
    build:
      context: ./services/manager
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      worker-bus-api:
        condition: service_started
      worker-gtfs:
        condition: service_started
    # yes i know
    command: >
      sh -c "
        echo 'Waiting for services to start...' &&
        sleep 30 &&
        echo 'Starting queue-manager' &&
        node --unhandled-rejections=strict --env-file=.env build/index.js
      "

  worker-bus-api:
    build:
      context: ./services/workers/worker-bus-api
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    deploy:
      replicas: 2
  worker-gtfs:
    build:
      context: ./services/workers/worker-gtfs
      dockerfile: Dockerfile.dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
  redis:
    image: 'redis:7.2.5'
    volumes:
      - redis_data:/data
  postgres:
    image: 'postgres:16.3'
    volumes:
      - ./init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=thebus
      - POSTGRES_USER=admin
      - POSTGRES_HOST_AUTH_METHOD=trust # TODO: For the health check to work without password. I'm sure there is a
        # good way to do this.
volumes:
  redis_data:
  postgres_data:
